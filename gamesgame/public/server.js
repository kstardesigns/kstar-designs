require("dotenv").config();const express=require("express"),fetch=require("node-fetch"),path=require("path"),app=express(),clientId=process.env.CLIENT_ID,clientSecret=process.env.CLIENT_SECRET;let accessToken="";async function getAccessToken(){try{const e=await fetch("https://id.twitch.tv/oauth2/token",{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({client_id:clientId,client_secret:clientSecret,grant_type:"client_credentials"})}),t=await e.json();accessToken=t.access_token,console.log("Access token obtained:",accessToken)}catch(e){console.error("Error obtaining access token:",e)}}async function fetchData(e){try{console.log("Sending request with query:",e),console.log("access:"+accessToken);const t=await fetch("https://api.igdb.com/v4/games",{method:"POST",headers:{"Client-ID":clientId,Authorization:`Bearer ${accessToken}`,Accept:"application/json"},body:e}),o=await t.json();return console.log("Raw response data:",o),o}catch(e){throw console.error("Error fetching data from IGDB:",e),e}}async function fetchAgeRatings(e){try{const t=`fields rating, content_descriptions; where id = (${e.join(",")});`;console.log("Age Ratings Query:",t);const o=await fetch("https://api.igdb.com/v4/age_ratings",{method:"POST",headers:{"Client-ID":clientId,Authorization:`Bearer ${accessToken}`,Accept:"application/json"},body:t}),a=await o.json();return console.log("Age Ratings Data:",a),a}catch(e){throw console.error("Error fetching age ratings from IGDB:",e),e}}async function fetchInvolvedCompanies(e){try{const t=`fields company.*; where id = (${e.join(",")});`;console.log("Company list Query:",t);const o=await fetch("https://api.igdb.com/v4/involved_companies",{method:"POST",headers:{"Client-ID":clientId,Authorization:`Bearer ${accessToken}`,Accept:"application/json"},body:t}),a=await o.json();return console.log("Involved companies Data:",a),a}catch(e){throw console.error("Error fetching age ratings from IGDB:",e),e}}async function fetchCharacters(e){try{const t=`fields id, name, akas; where ${e.map((e=>`name ~ *"${e}"*`)).join(" | ")}; limit 500;`;console.log("Character query:",t);const o=await fetch("https://api.igdb.com/v4/characters",{method:"POST",headers:{"Client-ID":clientId,Authorization:`Bearer ${accessToken}`,Accept:"application/json"},body:t});if(!o.ok)throw new Error(`HTTP error! Status: ${o.status}`);const a=await o.json();return console.log("characters:",a),a}catch(e){throw console.error("Error fetching characters from IGDB:",e),e}}app.use(express.static(path.join(__dirname,"public"))),app.get("/games",(async(e,t)=>{accessToken||await getAccessToken();const o=e.query.search;try{const e=`search "${o}"; where keywords != (27216, 2004, 24124); fields name, cover.url, first_release_date; limit 10;`,a=await fetchData(e);t.json(a)}catch(e){t.status(500).json({error:"Failed to fetch data from IGDB"})}})),app.get("/game",(async(e,t)=>{accessToken||await getAccessToken();const o=e.query.id;try{const e=`where id = ${o}; fields *, cover.url, release_dates.y, age_ratings.content_descriptions, involved_companies.*;`,a=await fetchData(e);t.json(a)}catch(e){t.status(500).json({error:"Failed to fetch data from IGDB"})}})),app.get("/age_ratings",(async(e,t)=>{accessToken||await getAccessToken();const o=e.query.ids.split(",").map((e=>parseInt(e,10)));console.log("Rating IDs from Request:",o);try{const e=await fetchAgeRatings(o);t.json(e)}catch(e){t.status(500).json({error:"Failed to fetch data from IGDB"})}})),app.get("/involved_companies",(async(e,t)=>{accessToken||await getAccessToken();const o=e.query.ids.split(",").map((e=>parseInt(e,10)));console.log("Company IDs from Request:",o);try{const e=await fetchInvolvedCompanies(o);t.json(e)}catch(e){t.status(500).json({error:"Failed to fetch data from IGDB"})}})),app.get("/characters",(async(e,t)=>{accessToken||await getAccessToken();const o=e.query.searchTerms.split(",");console.log("Search Terms from Request:",o);try{const e=await fetchCharacters(o);t.json(e)}catch(e){t.status(500).json({error:"Failed to fetch data from IGDB"})}})),app.get("*",((e,t)=>{t.sendFile(path.join(__dirname,"public","index.html"))})),app.listen(3e3,(()=>{console.log("Server is running on port 3000")}));